logic programming languages long terested answers questions computable principle outcome puts bounds possibilities formalization recently precise comparisons efficiency decision methods developments complexity theory applications logic big question significance direction applied parts computability languages offer obvious opportunity syntactic advanced semantical complete examples give wide ranging mathematical queries machine process simulate programs naturally enter giving descriptions processes definition meaning program requires explain objects computation statics problem transformed dynamics theories automata nets teresting formalized portion field concentration finite state algebraic aspects understanding higher level features involves infinite forces pass levels explanation conceptual ideas final simulation real made mathematically exact find abstractions represent structures experience independent workers method data types lattices partial orderings information content ordering continuous mappings demonstrated flexibility approach providing definitions proofs clean undue dependence implementations remains showing abstract conceptualizations actualized say unified cacm september 1977 scott programming denotational semantics calculus models functions approximation function spaces 1 2 4 20 5 21 24 27 ca770902 jb december 28 6 49 2931  