gedanken simple typeless language based principle completeness reference concept experimental programming language characteristics 1 permitted context permissible meaningful functions labels results values variables 2 assignment indirect addressing formalized introducing called reference turn possess assignment operation affects relation 3 compound data structures treated 4 type declarations functional approach references insure process accepts structure accept logically equivalent regardless internal representation generally implicit giving arbitrary algorithm computing accessing components existence label permits construction coroutines quasi parallel processes unorthodox control mechanisms variety examples illustrates generality limitations extensions discussed briefly cacm 1970 reynolds coroutine typeless applicative lambda calculus list processing nondeterministic 20 22 5 23 24 ca700506 jb february 13 1978 43 pm 1024 2060 1051 1102 1132 1379 1380 1390 1486 1541 1542 1549 1552 1683 1693 1706 1781 1787 1826 1836 1846 1854 1860 1878 1945 1989 378 2015 2061 2082 2091 2155 2152 2168 2179 2218 2294 2340 2356 2470 2546 2603 2698 2708 2719 2723 2770 2824 2838 2842 2855 2879 2921 2982 2986 557 3045 3077 3080 3093 3106 3112 3124 3154 627 106 210 1421 1469 1477 1491 1869 2110 2558 3150 1389 6 1471 1834 2046 2148 2192 2457 2704 2939 2940 2941 2943 3073 3148 3184  