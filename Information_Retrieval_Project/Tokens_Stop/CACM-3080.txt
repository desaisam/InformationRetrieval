proving correctness heuristically optimized code system proving programs written high level language correctly translated low primary post optimization step code generation need generated compiler fact hand coded examples usefulness interesting results ability handle implement recursion bypassing start program detection pinpointing wide class errors examples demonstrate genre paper result substantially faster operation saving memory terms stack sizes cacm july 1978 samet compilers correctness debugging verification lisp 4 12 21 22 5 24 ca780708 dh february 7 1979 3 53 pm 1024 3080 1051 1102 1132 1390 1486 1549 1706 1826 1878 378 2060 2155 2168 2719 2723 2838 2842 2855 2879 3077 3106 627 106 210 2850  