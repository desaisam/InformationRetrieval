a correspondence between algol 60 and church s lambda notation part i this paper describes how some of the semantics can be formalized by establishing a correspondence between expressions in modified form l notation first model for computer languages compute behavior is described based on notions functional application abstraction but also having analogues imperative language features then this used as an abstract object into which mapped many emerge particular arrangements small number structural rules suggesting new classifications generalizations the first informally mainly illustrations second part gives formal description i e compiler objct itself presented purely that one using only cacm february 1965 landin p j ca650201 jb march 7 1978 11 26 pm 1086 4 1323 1132 1234 1263 1265 1270 1358 1379 1380 1453 1464 1484 1491 1498 1613 1614 1665 1781 1787 1825 1860 1989 2083 2112 2178 2179 2252 2325 2341 2534 2541 2546 2645 2652 2684 2698 2733 2820 2842 2929 2934 3069 3073 3155 669 679 691 761 949 989 5 267 2326 3184 799 123 6 196 919 990 1007 1046 1131 1139 1140 1149 1198 1215 1223 1303 1366 1421 1460 1462 1463 1467 1468 1477 1496 1531 1535 1565 1601 1602 1626 1641 1788 205 1834 224 249 288 316 381 398 2059 2127 2192 404 410 463 464 483 3186 3188 584 600 680 763 