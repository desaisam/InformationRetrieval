logic and programming languages has been long in terested whether answers to certain questions are computable principle since the outcome puts bounds on possibilities of formalization more recently precise comparisons efficiency decision methods have become available through developments complexity theory these however applications logic a big question is significance other direction for more applied parts computability languages offer an obvious opportunity as their syntactic well advanced semantical can hardly be said complete though we many examples still give wide ranging mathematical these queries what machine process how or how does simulate programs naturally enter giving descriptions processes the definition meaning program then requires us explain what objects computation way statics problem they transformed dynamics so far theories automata nets though most teresting formalized only portion field there perhaps too much concentration finite state algebraic aspects it would seem that understanding higher level features involves with infinite forces pass several levels explanation go from conceptual ideas final simulation real made mathematically exact if find right abstractions represent necessary structures experience independent workers method data types lattices partial orderings under information content ordering continuous mappings demonstrated flexibility this approach providing definitions proofs which clean without undue dependence implementations nevertheless remains done showing abstract conceptualizations cannot actualized before say unified cacm september 1977 scott d s programming denotational semantics calculus models functions approximation function spaces 1 2 4 20 5 21 24 27 ca770902 jb december 28 6 49 am 2931 